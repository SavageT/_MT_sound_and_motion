;%%acquire csfclear allclear mexfilename=['MikeMay_Fixation', datestr(now, 'MM.HH.dd-mm-yy'),'.mat'];KbName('UnifyKeyNames');bf=0; %break variable used below%%Path for TS% load('C:\Dropbox\__Projects\_MT_sound_and_motion\tSavage_Asus_Gray_calibration.mat')% load('C:\Dropbox\__Projects\_MT_sound_and_motion\tSavage_asus_gammatable1.mat')%%Path for ione% load('C:\Users\Ione Fine\Documents\Work\Science\Programming Utilities\UW_toolbox\stimulus\tSavage_Asus_Gray_calibration.mat')%%Screen and viewing paramsdisplay.dist=57; % in cmdisplay.width=59.69; % in cmdisplay.height=33.528;% in cmffffjjjjjjfffffdisplay.pxPerDeg=42.67;%%%%%%%%%%%%%%%%%%%%%%choice = questdlg('Did you check fLux and fNAme?','HALT!','Yes','No', 'No');switch choice    case 'Yes'           fLux=1;    case 'No'        fLux=0;end if fLux==0; boom; end%%%OptionsdispType=1;display.screenNum=0;params.ntrials=1; %%Set to 1 for square display, set to 2 for whole screen, 3 for calib checkScreen('Preference', 'SkipSyncTests', 0 ); %%Enable this if you're getting syn problemsparams.ntrials=4; % number of trials per spatial frequency% params.spfreq=[0.3	0.6 1.20 2.4 4.8 6.4];  %spatial freq of the gratings% params.spfreq=[.25 .5 1 2 3];  %spatial freq of the gratingsparams.spfreq=[0.2500 0.3536 0.5000 0.7071 1.0000 2.00];params.inc=.005; %the smallest increment in contrastparams.backlum=.5;gammacorrect=2; %%Choose 1 for built in gamma table correction {not working} or 2 for manual value look upcalib.screenLevels=((([16 32 64 96 128 159 191 223 255])/127.5)-1); %screen calibration levels scaled between -1 and 1calibFileN=('C:\Dropbox\__Projects\_MT_sound_and_motion\tSavage_asus_gammatable1.mat');%%%%%%%%%disp('adjust contrast till barely visible using f and j');disp('space bar to move on the next stimulus');disp('press esc to abort the trial');display = OpenWindow(display);windowPtr=display.windowPtr;if gammacorrect==1    %%Path for TS    load('C:\Dropbox\__Projects\_MT_sound_and_motion\tSavage_Asus_Gray_calibration.mat')    oldtable=Screen('LoadNormalizedGammaTable', windowPtr, calib.normlzdGammaTable*[1 1 1]);elseif gammacorrect==2    load(calibFileN)endif dispType==1    apsize=pix2angle(display, min([display.resolution]));    x=linspace(0, apsize, min([display.resolution]));    elseif dispType==2        apsize=pix2angle(display, max([display.resolution]));    x=linspace(0, apsize, max([display.resolution]));elseif dispType==3        params.spfreq=zeros(size(calib.screenLevels)); %makes the trial last as long as it needs to!endsq=(max([display.resolution])-min([display.resolution]))/2;for s=1:length(params.spfreq)        if dispType==1        tmp=repmat(sin(x*params.spfreq(s)*2*pi), min([display.resolution]), 1);        csf.pars.gratings(:, :, s)=tmp;        csfimg(:, :, s)=padarray(tmp,[0 sq]);            elseif dispType==2        csfimg(:, :, s)=repmat(sin(x*params.spfreq(s)*2*pi), min([display.resolution]), 1);            elseif dispType==3                csfimg(:, :, s)=ones(display.resolution(2), display.resolution(1))*calib.screenLevels(s);            endend% Screen('CloseAll');backtxt=Screen('MakeTexture',windowPtr, 127.5*ones(display.resolution(2), display.resolution(1)));for n=1:params.ntrials        for s=1:length(params.spfreq)         contrast=.5;                Screen('DrawTexture',windowPtr, backtxt)        Screen( 'Flip', windowPtr);                waitTime=.25; startTime = GetSecs; while GetSecs-startTime < waitTime; end %%%This is a work around because waitTil and pause cause sync        %%%errors                        trialover=0;        while trialover==0                        if dispType==3                contrast=1;            end                        LUTvals=gammaTable1([round(255*(.5+((contrast/2).*csfimg(:, :, s)))+1)]);            txt=Screen('MakeTexture',windowPtr, 255*LUTvals);                        Screen('DrawTexture',windowPtr, txt);            Screen( 'Flip', windowPtr);            Screen('Close', txt)                        [keyIsDown,secs,keyCode] = KbCheck;                        if keyIsDown	% if you hit a key and...                if (find(keyCode)==74);  % if  you hit 'j' on keyboard                    contrast=min([contrast+params.inc 1]); %trial is over, move to next trial.                                    elseif (find(keyCode)==70); % if  you hit 'f' on keyboard                    contrast=max([contrast-params.inc 0]); %trial is over, move to next trial.                                    elseif find(keyCode)==32; % if space bar to end trial                    SysBeep;                    trialover=1;                    csfR.setContrast(s,n)=contrast;                                             elseif (find(keyCode)==27); % if  you hit 'esc' on keyboard                    bf=1;                    break                end                if bf;break;end            end            if bf;break;end        end        if bf;break;end                        csfR.sf(s,1)=params.spfreq(s);    end    if bf;break;end            endif ~bf        csfR.sens=1./csfR.setContrast;        csfR.meanSens=mean(csfR.sens,2);        csfR.stdSens=std(csfR.sens')';end if gammacorrect==1    Screen('LoadNormalizedGammaTable', windowPtr, oldtable);endcsf.pars.sfList=params.spfreq;csf.pars.ntrials=params.ntrials;csf.pars.calibFileN=calibFileN;csf.pars.gammacorrect=gammacorrect;csf.pars.dispType=dispType;csf.display=display;csf.pars.ntrials=params.ntrials;csf.pars.calibFileN=calibFileN;csf.pars.gammacorrect=gammacorrect;csf.pars.dispType=dispType;csf.display=display;csf.res=csfR;Screen('CloseAll');ShowCursor;if ~bf    save(filename, 'csf')endclear mex%%%%%%%Memory leak "fix"  that prob doesn't work %%%%%%%heapTotalMemory = java.lang.Runtime.getRuntime.totalMemory;heapFreeMemory = java.lang.Runtime.getRuntime.freeMemory;if(heapFreeMemory < (heapTotalMemory*0.01))    java.lang.Runtime.getRuntime.gc;end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%